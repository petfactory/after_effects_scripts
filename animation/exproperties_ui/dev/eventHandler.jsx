if(typeof JSON!=="object"){JSON={}}(function(){"use strict";function f(e){return e<10?"0"+e:e}function quote(e){escapable.lastIndex=0;return escapable.test(e)?'"'+e.replace(escapable,function(e){var t=meta[e];return typeof t==="string"?t:"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+e+'"'}function str(e,t){var n,r,i,s,o=gap,u,a=t[e];if(a&&typeof a==="object"&&typeof a.toJSON==="function"){a=a.toJSON(e)}if(typeof rep==="function"){a=rep.call(t,e,a)}switch(typeof a){case"string":return quote(a);case"number":return isFinite(a)?String(a):"null";case"boolean":case"null":return String(a);case"object":if(!a){return"null"}gap+=indent;u=[];if(Object.prototype.toString.apply(a)==="[object Array]"){s=a.length;for(n=0;n<s;n+=1){u[n]=str(n,a)||"null"}i=u.length===0?"[]":gap?"[\n"+gap+u.join(",\n"+gap)+"\n"+o+"]":"["+u.join(",")+"]";gap=o;return i}if(rep&&typeof rep==="object"){s=rep.length;for(n=0;n<s;n+=1){if(typeof rep[n]==="string"){r=rep[n];i=str(r,a);if(i){u.push(quote(r)+(gap?": ":":")+i)}}}}else{for(r in a){if(Object.prototype.hasOwnProperty.call(a,r)){i=str(r,a);if(i){u.push(quote(r)+(gap?": ":":")+i)}}}}i=u.length===0?"{}":gap?"{\n"+gap+u.join(",\n"+gap)+"\n"+o+"}":"{"+u.join(",")+"}";gap=o;return i}}if(typeof Date.prototype.toJSON!=="function"){Date.prototype.toJSON=function(){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null};String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(){return this.valueOf()}}var cx,escapable,gap,indent,meta,rep;if(typeof JSON.stringify!=="function"){escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;meta={"\b":"\\b","  ":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"};JSON.stringify=function(e,t,n){var r;gap="";indent="";if(typeof n==="number"){for(r=0;r<n;r+=1){indent+=" "}}else if(typeof n==="string"){indent=n}rep=t;if(t&&typeof t!=="function"&&(typeof t!=="object"||typeof t.length!=="number")){throw new Error("JSON.stringify")}return str("",{"":e})}}if(typeof JSON.parse!=="function"){cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;JSON.parse=function(text,reviver){function walk(e,t){var n,r,i=e[t];if(i&&typeof i==="object"){for(n in i){if(Object.prototype.hasOwnProperty.call(i,n)){r=walk(i,n);if(r!==undefined){i[n]=r}else{delete i[n]}}}}return reviver.call(e,t,i)}var j;text=String(text);cx.lastIndex=0;if(cx.test(text)){text=text.replace(cx,function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)})}if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,""))){j=eval("("+text+")");return typeof reviver==="function"?walk({"":j},""):j}throw new SyntaxError("JSON.parse")}}})()isSupported = function(file) {    try {        //macs will send a file or a folder through here.  we need to respond true to folder to allow users to navigate through their directory structure        if (file instanceof Folder)            return true;        else            return file.name.match(/\.json/i) != null;    } catch (e) {        alert("Error in isSupported method: " + e);    }}function myScript(thisObj){        function myScript_buildUI(thisObj)    {        function addPreset(name, expr)        {            var preset = {}            preset.name = name;            preset.expression = expr;                        var index = preset_array.length;            preset_dropdown.add("item", preset.name, index+1)            preset_array.push(preset)            preset_dropdown.selection = index;        }            function removePreset(index)        {            if (index < 1)            {                alert("This can not be removed");                return;            }            if (index > (preset_array.length-1))            {                alert("Index error");                return;            }            preset_array.splice(index, 1);            preset_dropdown.remove(index);            preset_dropdown.selection = index-1;                }                var preset_array = [];                //var preset_obj = {};        //preset_obj.presets = myArray;                var myPanel = (thisObj instanceof Panel) ? thisObj : new Window("palette", "Add expr", [0, 0, 500, 600]);                var add_button = myPanel.add ("button", undefined, "+");        add_button.addEventListener ("click", add_button_click, false);                var rem_button = myPanel.add ("button", undefined, "-");        rem_button.addEventListener ("click", rem_button_click, false);                var save_button = myPanel.add ("button", undefined, "Save");        save_button.addEventListener ("click", save_button_click, false);                var load_button = myPanel.add ("button", undefined, "Load");        load_button.addEventListener ("click", load_button_click, false);                var edittext = myPanel.add ("edittext", undefined, "");        edittext.alignment = ["fill", ""]                var preset_dropdown = myPanel.add ("dropdownlist", undefined, null);        preset_dropdown.alignment = ["fill", ""]        preset_dropdown.selection = 0;                var set_button = myPanel.add ("button", undefined, "Set Preset");        set_button.addEventListener ("click", set_button_click, false);                var expr_edittext = myPanel.add ("edittext", undefined, "", {multiline: true, scrolling: true, wantReturn: true});        expr_edittext.minimumSize = [200, 200];        expr_edittext.alignment = ["fill", "fill"]                // add the reset "preset"        addPreset("Reset", "");                        // event handlers                function set_button_click(e)        {            var index = preset_dropdown.selection.index;            var preset = preset_array[index];                        edittext.text = preset.name;            expr_edittext.text = preset.expression;        }            function add_button_click(e)        {            var name = edittext.text;            if(name.length < 1) return;                        var expr = expr_edittext.text;            addPreset(name, expr);        }                 function rem_button_click(e)        {            removePreset(preset_dropdown.selection.index);        }            function save_button_click(e)        {            if (preset_array.length == 1)            {                alert("No presets to save");                return;            }                    var preset_obj = {};            preset_obj.presets = preset_array.slice(1, preset_array.length);                    var json_data = JSON.stringify(preset_obj, null, 4);            //$.writeln(json_data);                        var file_path = File.saveDialog("Export keyframe data",  "*.json");            if (file_path)            {                file_path.open("w");                file_path.write(json_data);                file_path.close();            };                                }            function load_button_click(e)        {            var file = File.openDialog("Open Preset file", isSupported, false) ;                        if (file)            {                if (file.open("r"))                {                    file.encoding = "UTF-8";                    var json = file.read();                    json_data = JSON.parse(json)                    file.close()                                        var presets = json_data.presets;                                        for (i = 0; i<presets.length; i++)                    {                        var p = presets[i];                        addPreset(p.name, p.expression);                    }                }            }        }            //Setup panel sizing and make panel resizable        myPanel.layout.layout(true);        myPanel.layout.resize();        myPanel.onResizing = myPanel.onResize = function () {this.layout.resize();}        return myPanel;    }    var myScriptPal = myScript_buildUI(thisObj);     if ((myScriptPal != null) && (myScriptPal instanceof Window))    {        myScriptPal.center();        myScriptPal.show();    }}      myScript(this);