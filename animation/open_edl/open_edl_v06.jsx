function createChildComp(   media,                            name,                            width,                            height,                            pixelAspect,                            duration,                            framerate,                            startTime,                            inPoint,                            outPoint,                            parent){        myComp = app.project.items.addComp( name, width, height, pixelAspect, duration, framerate);                                                                            var mediaLayer = myComp.layers.add(media);    var myLayer = parent.layers.add(myComp);    myLayer.startTime = startTime;    return myComp;} function importMedia(pathurl) {    var filePath = new File(pathurl)         if(filePath == null || !filePath.exists) {        return null    }    var myImportOptions = new ImportOptions();    myImportOptions.file = new File(pathurl);    var myImport = app.project.importFile(myImportOptions);        return myImport } function createEDLFromXML(filePath) {            if(filePath == null) {                return    }    var myFile = new File(filePath)        if (!myFile.exists){        alert("File do not exist")        return    }        // read the file    myFile.open("r");    var myXmlString = myFile.read();    var myRoot = new XML(myXmlString);    myFile.close();            // sequence attr    var width = Number(myRoot.sequence.media.video.format.samplecharacteristics.width)    var height = Number(myRoot.sequence.media.video.format.samplecharacteristics.height)    var mainCompTimebase = Number(myRoot.sequence.rate.timebase)    var mainCompDuration  = Number(myRoot.sequence.duration)/mainCompTimebase    var mainCompName = myRoot.sequence.name        // create the main comp    var mainComp = app.project.items.addComp(   name=mainCompName,                                                width=width,                                                height=height,                                                pixelAspect=1,                                                duration=mainCompDuration,                                                framerate=mainCompTimebase);                                                                            mainComp.duratio = mainCompDuration        mainCompFolder = app.project.items.addFolder(mainCompName);    mainComp.parentFolder = mainCompFolder;    //var videoNodes = myRoot.descendants("track")    // is equivalent to the shorter:    //var videoNodes = myRoot..track    var clipitemNodes = myRoot.sequence.media.video.track.clipitem           for (i in clipitemNodes) {                var node = clipitemNodes[i];        var start = Number(node.start)/mainCompTimebase;        var end = Number(node.end)/mainCompTimebase;        var name = node.name;        var pathUrl = node.file.pathurl;        var duration = Number(node.duration)/mainCompTimebase;        var inPoint = Number(node.in)/mainCompTimebase;        var outPoint = Number(node.out)/mainCompTimebase;        // brute force remove first 7 chars "file://" from the pathurl in the xml        var pathUrlSliced = pathUrl.slice(7)        //$.write (name, "\n", start, "\n", end, "\n", pathUrlSliced, "\n", duration, "\n\n")                mainChildFolder = app.project.items.addFolder(name);        mediaFolder = app.project.items.addFolder("media");        compFolder = app.project.items.addFolder("comp");                mediaFolder.parentFolder = mainChildFolder;        compFolder.parentFolder = mainChildFolder;        mainChildFolder.parentFolder = mainCompFolder;                // import the media        var media = importMedia(pathUrlSliced)         if (media == null) {            media = app.project.importPlaceholder(name="missing "+name, width=width, height=height, framerate=mainCompTimebase, duration=duration)        }                media.parentFolder = mediaFolder;        comp = createChildComp( media=media,                                name=name,                                width=width,                                height=height,                                pixelAspect=1,                                duration=duration,                                framerate=mainCompTimebase,                                startTime=start,                                inPoint=null,                                outPoint=null,                                parent=mainComp);                                                                    comp.parentFolder = compFolder;                      }} //var filePath = new File("/Users/johan/Documents/Projects/python_dev/movies/shot_v008.xml");var filter;var osName = system.osName;//alert(osName == "MacOS")//if (isWindows()) {if (false){        filter = ["XML:*.xml"];}else {         filter = function(file) {        try {            //macs will send a file or a folder through here.  we need to respond true to folder to allow users to navigate through their directory structure            if (file instanceof Folder)                return true;            else                return file.name.match(/\.xml/i) != null;        }         catch (e) {            alert("Error in isSupported method: " + e);        }                    }}var filePath = File.openDialog("Create EDL from XML",  filter, false);app.beginUndoGroup("Create EDL from XML"); createEDLFromXML(filePath)app.endUndoGroup(); 