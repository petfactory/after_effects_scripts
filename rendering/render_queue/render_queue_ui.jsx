/*    function collect_comps(){    var project = app.project    num_items = project.numItems;    var items = project.items;    var comp_array = [];    for (var i = 0;  i < num_items; i++)    {        if (items[i+1] instanceof CompItem)        {            comp_array.push(items[i+1]);        }    }    //$.writeln(comp_array);    return comp_array}*/function add_to_render_queue(comp, start_frame, end_frame, dir_path, template_string){    var sequence = false;    if (end_frame-start_frame > 1) sequence = true;        var render_item = app.project.renderQueue.items.add(comp);    render_item.outputModule(1).applyTemplate(template_string);              // a hack just to get to the extension, is this really the only way... ?    var output_module_settings = app.project.renderQueue.item(1).outputModule(1).getSettings( GetSettingsFormat.STRING );    var file_name = output_module_settings["Output File Info"]["File Name"];    var file_name_split = file_name.split(".");    var ext = file_name_split[file_name_split.length-1];    var fps = 25.0;    var duration = end_frame - start_frame;    var start_time = start_frame/fps;    var duration_time = duration/fps;    var color_depth = 8;    var padding = "[####]";    var file_name = comp.name;        var file_path = sequence ? file_name+"_"+start_frame+"_"+(end_frame-1)+"."+padding+"."+ext : file_name+"_"+start_frame+"."+padding+"."+ext;        var my_renderSettings = {    "Color Depth":color_depth+" bits per channel",    "Quality":"Best",    "Effects":"All On",    "Time Span Duration":duration_time,    "Time Span Start":start_time,    };    render_item.setSettings(my_renderSettings);    var output_module_settings = {        "Output File Info":        {            "Base Path":dir_path,            //"Subfolder Path":"draft",            "File Name":file_path            }        };        render_item.outputModule(1).setSettings(output_module_settings);}function getOutputModuleTemplateNames()  {        var currentOMName;        var OMStringsPrefSection = "Output Module Spec Strings Section v28";        var OMStringsKeyPrefix = "Output Module Spec Strings Name ";        var hiddenPrefixRE = /_HIDDEN/;        var OMList = new Array();        for(var i = 0; app.preferences.havePref(OMStringsPrefSection, OMStringsKeyPrefix+i, PREFType.PREF_Type_MACHINE_INDEPENDENT_OUTPUT); i++)        {          currentOMName = app.preferences.getPrefAsString(OMStringsPrefSection, OMStringsKeyPrefix+i, PREFType.PREF_Type_MACHINE_INDEPENDENT_OUTPUT);          if(currentOMName.match(hiddenPrefixRE)==null) OMList.push(currentOMName);        }        return OMList;  }/*-----------------------------------------------------------------   UI Panel-----------------------------------------------------------------*/function myScript(thisObj){    function myScript_buildUI(thisObj)    {        var myPanel = (thisObj instanceof Panel) ? thisObj : new Window("palette", "import 2D JSON", [0, 0, 300, 300]);        myPanel.add ("statictext", undefined, "Frames:");                var min_width = 180;        var frame_edittext = myPanel.add ("edittext", undefined, "0-10, 25-35, 50");        frame_edittext.active = true;        frame_edittext.characters = 20;        frame_edittext.minimumSize.width = min_width;        var template_list = getOutputModuleTemplateNames()        var typeDropdown = myPanel.add ("dropdownlist", undefined, template_list);        typeDropdown.minimumSize.width = min_width;        typeDropdown.selection = 2;                render_button = myPanel.add ("button", undefined, "Render Frames");        render_button.minimumSize.width = min_width;        render_button.onClick = function()        {                        var comp = app.project.activeItem;            if (comp == null || !(comp instanceof CompItem))            {                alert("Select a comp!")                return            }                        dir_path = Folder.selectDialog('Select an outpu directory:', null);                        if (dir_path == null) return;            var template_string = typeDropdown.selection.text;            var frame_string = frame_edittext.text;            var frame_split = frame_string.split(",");                        var num_frames = frame_split.length;                        //$.writeln(num_frames);                        //var frame_list = new Array();            for (var i = 0; i < num_frames; i++)            {                // if the value is a number we have a single frame               if (!isNaN (frame_split[i]))               {                   //$.writeln("frame "+ frame_split[i])                   var n = Number(frame_split[i])                   //frame_list.push(n);                   add_to_render_queue(comp, n, n+1, String(dir_path), template_string);               }               else               {                   // check for a frame range                   var range_split = frame_split[i].split("-");                   if(range_split.length == 2)                   {                       //$.writeln(range_split)                       if (isNaN (range_split[0]))continue;                       if (isNaN (range_split[1]))continue;                       start_frame = Number(range_split[0]);                       end_frame = Number(range_split[1]);                       //$.writeln("range "+ start_frame + " - " + end_frame)                       add_to_render_queue(comp, start_frame, end_frame+1, String(dir_path), template_string);                   }                }            }            } // end render button callback        //Setup panel sizing and make panel resizable        myPanel.layout.layout(true);        myPanel.layout.resize();        myPanel.onResizing = myPanel.onResize = function () {this.layout.resize();}        return myPanel;    }    var myScriptPal = myScript_buildUI(thisObj);     if ((myScriptPal != null) && (myScriptPal instanceof Window))    {        myScriptPal.center();        myScriptPal.show();    }}      myScript(this);